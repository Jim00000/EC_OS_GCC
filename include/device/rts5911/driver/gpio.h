#pragma once

#include "armv8m/cmsis_gcc.h"
#include "device/rts5911/RTS5911.h"

typedef enum
{
  FUNCTION_MODE_GPIO = 0,
  FUNCTION_MODE_ALT1 = 1,
  FUNCTION_MODE_ALT2 = 2,
  FUNCTION_MODE_ALT3 = 3,
  /* semantic index */
  FUNCTION_MODE_ESPI_ALERT = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_ESPI_CS = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_ESPI_IO3 = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_ESPI_IO2 = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_ESPI_IO1 = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_ESPI_IO0 = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_ESPI_CLK = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C0_SCL = FUNCTION_MODE_ALT2,
  FUNCTION_MODE_I2C0_SDA = FUNCTION_MODE_ALT2,
  FUNCTION_MODE_I2C1_SCL = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C1_SDA = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C2_SCL = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C2_SDA = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C3_SCL = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C3_SDA = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C4_SCL = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C4_SDA = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C5_SCL = FUNCTION_MODE_ALT2,
  FUNCTION_MODE_I2C5_SDA = FUNCTION_MODE_ALT2,
  FUNCTION_MODE_I2C6_SCL = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C6_SDA = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C7_SCL = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_I2C7_SDA = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_UART0_RXD = FUNCTION_MODE_ALT2,
  FUNCTION_MODE_UART0_TXD = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_UART1_RXD = FUNCTION_MODE_ALT2,
  FUNCTION_MODE_UART1_TXD = FUNCTION_MODE_ALT2,
  FUNCTION_MODE_UART2_RXD = FUNCTION_MODE_ALT1,
  FUNCTION_MODE_UART2_TXD = FUNCTION_MODE_ALT1,
} FUNCTION_MODE;

typedef enum
{
  GPIO_000 = 0,
  GPIO_001,
  GPIO_002,
  GPIO_003,
  GPIO_004,
  GPIO_005,
  GPIO_006,
  GPIO_007,
  GPIO_008,
  GPIO_009,
  GPIO_010,
  GPIO_011,
  GPIO_012,
  GPIO_013,
  GPIO_014,
  GPIO_015,
  GPIO_016,
  GPIO_017,
  GPIO_018,
  GPIO_019,
  GPIO_020,
  GPIO_021,
  GPIO_022,
  GPIO_023,
  GPIO_024,
  GPIO_025,
  GPIO_026,
  GPIO_027,
  GPIO_028,
  GPIO_029,
  GPIO_030,
  GPIO_031,
  GPIO_032,
  GPIO_033,
  GPIO_034,
  GPIO_035,
  GPIO_036,
  GPIO_037,
  GPIO_038,
  GPIO_039,
  GPIO_040,
  GPIO_041,
  GPIO_042,
  GPIO_043,
  GPIO_044,
  GPIO_045,
  GPIO_046,
  GPIO_047,
  GPIO_048,
  GPIO_049,
  GPIO_050,
  GPIO_051,
  GPIO_052,
  GPIO_053,
  GPIO_054,
  GPIO_055,
  GPIO_056,
  GPIO_057,
  GPIO_058,
  GPIO_059,
  GPIO_060,
  GPIO_061,
  GPIO_062,
  GPIO_063,
  GPIO_064,
  GPIO_065,
  GPIO_066,
  GPIO_067,
  GPIO_068,
  GPIO_069,
  GPIO_070,
  GPIO_071,
  GPIO_072,
  GPIO_073,
  GPIO_074,
  GPIO_075,
  GPIO_076,
  GPIO_077,
  GPIO_078,
  GPIO_079,
  GPIO_080,
  GPIO_081,
  GPIO_082,
  GPIO_083,
  GPIO_084,
  GPIO_085,
  GPIO_086,
  GPIO_087,
  GPIO_088,
  GPIO_089,
  GPIO_090,
  GPIO_091,
  GPIO_092,
  GPIO_093,
  GPIO_094,
  GPIO_095,
  GPIO_096,
  GPIO_097,
  GPIO_098,
  GPIO_099,
  GPIO_100,
  GPIO_101,
  GPIO_102,
  GPIO_103,
  GPIO_104,
  GPIO_105,
  GPIO_106,
  GPIO_107,
  GPIO_108,
  GPIO_109,
  GPIO_110,
  GPIO_111,
  GPIO_112,
  GPIO_113,
  GPIO_114,
  GPIO_115,
  GPIO_116,
  GPIO_117,
  GPIO_118,
  GPIO_119,
  GPIO_120,
  GPIO_121,
  GPIO_122,
  GPIO_123,
  GPIO_124,
  GPIO_125,
  GPIO_126,
  GPIO_127,
  GPIO_128,
  GPIO_129,
  GPIO_130,
  GPIO_131,
  /* semantic index */
  GPIO_ESPI_RESET = GPIO_020,
  GPIO_ESPI_ALERT = GPIO_003,
  GPIO_ESPI_CS = GPIO_004,
  GPIO_ESPI_IO3 = GPIO_005,
  GPIO_ESPI_IO2 = GPIO_006,
  GPIO_ESPI_IO1 = GPIO_007,
  GPIO_ESPI_IO0 = GPIO_008,
  GPIO_ESPI_CLK = GPIO_009,
  GPIO_I2C0_SCL = GPIO_094,
  GPIO_I2C0_SDA = GPIO_095,
  GPIO_I2C1_SCL = GPIO_118,
  GPIO_I2C1_SDA = GPIO_119,
  GPIO_I2C2_SCL = GPIO_014,
  GPIO_I2C2_SDA = GPIO_121,
  GPIO_I2C3_SCL = GPIO_100,
  GPIO_I2C3_SDA = GPIO_101,
  GPIO_I2C4_SCL = GPIO_017,
  GPIO_I2C4_SDA = GPIO_018,
  GPIO_I2C5_SCL = GPIO_027,
  GPIO_I2C5_SDA = GPIO_028,
  GPIO_I2C6_SCL = GPIO_036,
  GPIO_I2C6_SDA = GPIO_037,
  GPIO_I2C7_SCL = GPIO_038,
  GPIO_I2C7_SDA = GPIO_039,
  GPIO_UART0_RXD = GPIO_014,
  GPIO_UART0_TXD = GPIO_015,
  GPIO_UART1_RXD = GPIO_100,
  GPIO_UART1_TXD = GPIO_101,
  GPIO_UART2_RXD = GPIO_113,
  GPIO_UART2_TXD = GPIO_114,
} GPIO_INDEX;

__STATIC_FORCEINLINE void
gpio_set_function_mode (GPIO_INDEX gpio_idx, FUNCTION_MODE mode)
{
  GPIO->GCR_b[gpio_idx].MFCTRL = mode;
}

__STATIC_FORCEINLINE FUNCTION_MODE
gpio_get_function_mode (GPIO_INDEX gpio_idx)
{
  return GPIO->GCR_b[gpio_idx].MFCTRL;
}